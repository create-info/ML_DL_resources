#sk-learn实现线性回归:波士顿放假预测
from sklearn.datasets import load_boston
from sklearn.linear_model import LinearRegression,SGDRegressor,Ridge
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error

def myLinear():
  # 获取数据
  lb = load_boston()
  # 分割数据为训练集和测试集
  x_train,x_test,y_train,y_test = train_test_split(lb.data,lb.target,test_size=0.25) 
  print(y_train,y_test)
  
  # 进行标准化处理(特征值和目标值)
  std_x = StandardScaler()
  x_train = std_x.fit_transform(x_train)
  x_test = std_x.transform(x_test)
  
  std_y = StandardScaler()
  #0.19版本sklearn要求输入是二维，y_train.reshape(-1.1)将一维转为二维
  y_train = std_y.fit_transform(y_train.reshape(-1,1))
  y_test = std_y.transform(y_test.reshape(-1,1))

  # estimator预测
  # 正规方程求解的方式获取预测结果
  # lr = LinearRegression()
  # lr.fit(x_train,y_train)

  # 使用Sgd梯度下降的方式获取预测结果，适用于样本比较多的时候
  # sgd = SGDRegressor()
  # sgd.fit(x_train,y_train)

  #使用岭回归预测
  rig = Ridge()
  rig.fit(x_train,y_train)

  # print(lr.coef_) 
  # print(sgd.coef_)
  print(rig.coef_)
  
  #预测房子价格(得到标准化之前的结果)
  # y_predict = std_y.inverse_transform(lr.predict(x_test))
  # y_predict = std_y.inverse_transform(sgd.predict(x_test))
  y_predict = std_y.inverse_transform(rig.predict(x_test))

  print("测试集每个房子的预测价格:", y_predict)

  #根据标准化之前的结果求出误差
  print("均方误差：",mean_squared_error(std_y.inverse_transform(y_test),y_predict))

  return None

if __name__ == '__main__':
  myLinear()
